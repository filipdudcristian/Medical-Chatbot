{"ast":null,"code":"var _jsxFileName = \"E:\\\\Anu3\\\\IS\\\\proiect chatbot\\\\DoctorulVirtualFE\\\\src\\\\components\\\\ChatApp.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport \"./ChatApp.css\";\nimport \"@chatscope/chat-ui-kit-styles/dist/default/styles.min.css\";\nimport { useUserAuth } from \"../context/UserAuthContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport { MainContainer, ChatContainer, MessageList, Message, MessageInput, TypingIndicator } from \"@chatscope/chat-ui-kit-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatApp = () => {\n  _s();\n  // State to manage the typing indicator of the chatbot\n  const [isChatbotTyping, setIsChatbotTyping] = useState(false);\n  const {\n    logOut,\n    user,\n    role\n  } = useUserAuth();\n  const navigate = useNavigate();\n  const handleLogout = async () => {\n    try {\n      await logOut();\n      navigate(\"/\");\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  // State to store chat messages\n  const [chatMessages, setChatMessages] = useState([{\n    message: \"Buna, sunt Doctorul Virtual si sunt aici pentru a va raspunde la intrebarile tale medicale\",\n    sender: \"Doctorul Virtual\"\n  }]);\n\n  // Function to handle user messages\n  const handleUserMessage = async userMessage => {\n    // Create a new user message object\n    const newUserMessage = {\n      message: userMessage,\n      sender: \"user\",\n      direction: \"outgoing\"\n    };\n\n    // Update chat messages state with the new user message\n    const updatedChatMessages = [...chatMessages, newUserMessage];\n    setChatMessages(updatedChatMessages);\n\n    // Set the typing indicator for the chatbot\n    setIsChatbotTyping(true);\n\n    // Process user message with ChatGPT\n    await processUserMessageToChatGPT(updatedChatMessages);\n  };\n\n  // Function to send the user message to ChatGPT API\n  async function processUserMessageToChatGPT(messages) {\n    //console.log(messages)\n    // Prepare the messages in the required format for the API\n    let apiMessages = messages.map(messageObject => {\n      let role = \"\";\n      if (messageObject.sender === \"Doctorul Virtual\") {\n        role = \"assistant\";\n      } else {\n        role = \"user\";\n      }\n      return {\n        role: role,\n        content: messageObject.message\n      };\n    });\n    console.log(messages.at(messages.length - 1).message);\n    // System message for ChatGPT\n    const systemMessage = {\n      role: \"system\",\n      content: \"Explain all concept like a Professor in Biochemistry\"\n    };\n\n    // Prepare the API request body\n    //  const apiRequestBody = {\n    //    model: \"gpt-3.5-turbo\",\n    //    messages: [\n    //      systemMessage, // System message should be in front of user messages\n    //      ...apiMessages,\n    //    ],\n    //  };\n\n    let prompt = messages.at(messages.length - 1).message;\n    const apiRequestBody = {\n      prompt\n    };\n\n    // Send the user message to ChatGPT API\n    await fetch(\"http://localhost:8080/chat\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(apiRequestBody)\n    }).then(data => {\n      //console.log(data.json());\n      return data.json();\n    }).then(data => {\n      // Update chat messages with ChatGPT's response\n      console.log(data);\n      setChatMessages([...messages, {\n        //message: data.choices[0].message.content,\n        message: data.message,\n        sender: \"Doctorul Virtual\"\n      }]);\n      // Set the typing indicator to false after getting the response\n      setIsChatbotTyping(false);\n    });\n  }\n  const handleUserAttach = async e => {};\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"relative\",\n        height: \"777px\",\n        width: \"700px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-4 box user_info_chat\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center user_info_chat_box\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Bine ai venit, \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 30\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: user\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-grid gap-2 button_class\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            className: \"text-center\",\n            variant: \"primary\",\n            onClick: handleLogout,\n            children: \"Log out\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(MainContainer, {\n        style: {\n          height: \"70%\"\n        },\n        children: /*#__PURE__*/_jsxDEV(ChatContainer, {\n          children: [/*#__PURE__*/_jsxDEV(MessageList, {\n            typingIndicator: isChatbotTyping ? /*#__PURE__*/_jsxDEV(TypingIndicator, {\n              content: \"Doctorul Virtual tasteaza...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 18\n            }, this) : null,\n            children: chatMessages.map((message, i) => {\n              return /*#__PURE__*/_jsxDEV(Message, {\n                model: message,\n                style: message.sender === \"Doctorul Virtual\" ? {\n                  textAlign: \"left\"\n                } : {}\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 18\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n            placeholder: \"Scrie mesajul aici\",\n            onSend: handleUserMessage,\n            onAttachClick: e => this.handleUserAttach(e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 12\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 10\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 8\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 6\n    }, this)\n  }, void 0, false);\n};\n_s(ChatApp, \"XzOrm10t2RjVvKdGO/SdvlMy1O0=\", false, function () {\n  return [useUserAuth, useNavigate];\n});\n_c = ChatApp;\nexport default ChatApp;\nvar _c;\n$RefreshReg$(_c, \"ChatApp\");","map":{"version":3,"names":["useState","Button","useUserAuth","useNavigate","MainContainer","ChatContainer","MessageList","Message","MessageInput","TypingIndicator","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatApp","_s","isChatbotTyping","setIsChatbotTyping","logOut","user","role","navigate","handleLogout","error","console","log","message","chatMessages","setChatMessages","sender","handleUserMessage","userMessage","newUserMessage","direction","updatedChatMessages","processUserMessageToChatGPT","messages","apiMessages","map","messageObject","content","at","length","systemMessage","prompt","apiRequestBody","fetch","method","headers","body","JSON","stringify","then","data","json","handleUserAttach","e","children","style","position","height","width","className","fileName","_jsxFileName","lineNumber","columnNumber","variant","onClick","typingIndicator","i","model","textAlign","placeholder","onSend","onAttachClick","_c","$RefreshReg$"],"sources":["E:/Anu3/IS/proiect chatbot/DoctorulVirtualFE/src/components/ChatApp.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport \"./ChatApp.css\";\r\nimport \"@chatscope/chat-ui-kit-styles/dist/default/styles.min.css\";\r\nimport { useUserAuth } from \"../context/UserAuthContext\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport {\r\n MainContainer,\r\n ChatContainer,\r\n MessageList,\r\n Message,\r\n MessageInput,\r\n TypingIndicator,\r\n} from \"@chatscope/chat-ui-kit-react\";\r\n\r\nconst ChatApp = () => {\r\n // State to manage the typing indicator of the chatbot\r\n const [isChatbotTyping, setIsChatbotTyping] = useState(false);\r\n const { logOut, user, role } = useUserAuth();\r\n const navigate = useNavigate();\r\n const handleLogout = async () => {\r\n    try {\r\n      await logOut();\r\n      navigate(\"/\");\r\n    } catch (error) {\r\n      console.log(error.message);\r\n    }\r\n  };\r\n\r\n // State to store chat messages\r\n const [chatMessages, setChatMessages] = useState([\r\n   {\r\n     message: \"Buna, sunt Doctorul Virtual si sunt aici pentru a va raspunde la intrebarile tale medicale\",\r\n     sender: \"Doctorul Virtual\",\r\n   },\r\n ]);\r\n\r\n // Function to handle user messages\r\n const handleUserMessage = async (userMessage) => {\r\n   // Create a new user message object\r\n   const newUserMessage = {\r\n     message: userMessage,\r\n     sender: \"user\",\r\n     direction: \"outgoing\",\r\n   };\r\n\r\n   // Update chat messages state with the new user message\r\n   const updatedChatMessages = [...chatMessages, newUserMessage];\r\n   setChatMessages(updatedChatMessages);\r\n\r\n   // Set the typing indicator for the chatbot\r\n   setIsChatbotTyping(true);\r\n\r\n   // Process user message with ChatGPT\r\n   await processUserMessageToChatGPT(updatedChatMessages);\r\n };\r\n\r\n // Function to send the user message to ChatGPT API\r\n async function processUserMessageToChatGPT(messages) {\r\n  //console.log(messages)\r\n   // Prepare the messages in the required format for the API\r\n   let apiMessages = messages.map((messageObject) => {\r\n     let role = \"\";\r\n     if (messageObject.sender === \"Doctorul Virtual\") {\r\n       role = \"assistant\";\r\n     } else {\r\n       role = \"user\";\r\n     }\r\n     return { role: role, content: messageObject.message };\r\n   });\r\n\r\n   console.log(messages.at(messages.length - 1).message)\r\n   // System message for ChatGPT\r\n   const systemMessage = {\r\n     role: \"system\",\r\n     content: \"Explain all concept like a Professor in Biochemistry\",\r\n   };\r\n\r\n   // Prepare the API request body\r\n  //  const apiRequestBody = {\r\n  //    model: \"gpt-3.5-turbo\",\r\n  //    messages: [\r\n  //      systemMessage, // System message should be in front of user messages\r\n  //      ...apiMessages,\r\n  //    ],\r\n  //  };\r\n\r\n  let prompt = messages.at(messages.length - 1).message\r\n\r\n  const apiRequestBody = {\r\n    prompt\r\n  }\r\n\r\n   // Send the user message to ChatGPT API\r\n   await fetch(\"http://localhost:8080/chat\", {\r\n     method: \"POST\",\r\n     headers: {\r\n       \"Content-Type\": \"application/json\"\r\n     },\r\n     body: JSON.stringify(apiRequestBody),\r\n   })\r\n     .then((data) => {\r\n       //console.log(data.json());\r\n       return data.json();\r\n     })\r\n     .then((data) => {\r\n       // Update chat messages with ChatGPT's response\r\n       console.log(data);\r\n       setChatMessages([\r\n         ...messages,\r\n         {\r\n           //message: data.choices[0].message.content,\r\n           message: data.message,\r\n           sender: \"Doctorul Virtual\",\r\n         },\r\n       ]);\r\n       // Set the typing indicator to false after getting the response\r\n       setIsChatbotTyping(false);\r\n     });\r\n }\r\n\r\n const handleUserAttach = async (e) => { \r\n }\r\n\r\n return (\r\n   <>\r\n    \r\n     {/* A container for the chat window */}\r\n     <div style={{ position: \"relative\", height: \"777px\", width: \"700px\" }}>\r\n       <div className=\"p-4 box user_info_chat\">\r\n        <div className=\"text-center user_info_chat_box\">\r\n          <h3>Bine ai venit, <br /></h3>\r\n          <h4>{user}</h4>\r\n        </div>\r\n        \r\n        <div className=\"d-grid gap-2 button_class\">\r\n            <Button className=\"text-center\" variant=\"primary\"  onClick={handleLogout}>\r\n              Log out\r\n            </Button>\r\n            \r\n        </div>\r\n      </div>\r\n       <MainContainer style={{ height: \"70%\" }}>\r\n         <ChatContainer >\r\n           {/* Display chat messages and typing indicator */}\r\n           <MessageList\r\n             typingIndicator={\r\n               isChatbotTyping ? (\r\n                 <TypingIndicator content=\"Doctorul Virtual tasteaza...\" />\r\n               ) : null\r\n             }\r\n           >\r\n             {/* Map through chat messages and render each message */}\r\n             {chatMessages.map((message, i) => {\r\n               return (\r\n                 <Message\r\n                   key={i}\r\n                   model={message}\r\n                   style={\r\n                     message.sender === \"Doctorul Virtual\" ? { textAlign: \"left\" } : {}\r\n                   }\r\n                 />\r\n               );\r\n             })}\r\n           </MessageList>\r\n           {/* Input field for the user to type messages */}\r\n           <MessageInput\r\n             placeholder=\"Scrie mesajul aici\"\r\n             onSend={handleUserMessage}\r\n             onAttachClick={(e) => this.handleUserAttach(e)}\r\n           />\r\n         </ChatContainer>\r\n       </MainContainer>\r\n     </div>\r\n   </>\r\n );\r\n}\r\n\r\nexport default ChatApp;"],"mappings":"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"},"metadata":{},"sourceType":"module"}